import { supabase } from "@/integrations/supabase/client";

export type NotificationType = 
  | "inscription"
  | "annulation"
  | "confirmation"
  | "reminder"
  | "badge"
  | "skill_validation"
  | "mission_update";

export interface NotificationWithDetails {
  id: string;
  user_id: string;
  title: string;
  content: string;
  is_read: boolean;
  created_at: string;
  link_url?: string;
}

export class NotificationService {
  private static instance: NotificationService;

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  async createNotification(
    userId: string,
    title: string,
    content: string,
    linkUrl?: string
  ): Promise<boolean> {
    try {
      // V√©rifier que l'utilisateur est connect√©
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        console.log("Impossible de cr√©er une notification: utilisateur non connect√©");
        return false;
      }

      const { error } = await supabase
        .from("notifications")
        .insert({
          user_id: userId,
          title,
          content,
          link_url: linkUrl,
          is_read: false,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error("Erreur lors de la cr√©ation de notification:", error);
        return false;
      }

      return true;
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de notification:", error);
      return false;
    }
  }

  async notifyMissionRegistration(userId: string, missionTitle: string, missionId: string): Promise<void> {
    try {
      await this.createNotification(
        userId,
        "‚úÖ Inscription confirm√©e",
        `Votre inscription √† la mission "${missionTitle}" a √©t√© enregistr√©e avec succ√®s. Vous recevrez prochainement les d√©tails de participation.`,
        `/missions/${missionId}`
      );
    } catch (error) {
      console.error("Erreur lors de la notification d'inscription:", error);
    }
  }

  async notifyMissionCancellation(userId: string, missionTitle: string): Promise<void> {
    try {
      await this.createNotification(
        userId,
        "‚ùå Inscription annul√©e",
        `Votre inscription √† la mission "${missionTitle}" a √©t√© annul√©e. Vous pouvez vous r√©inscrire √† tout moment si des places sont disponibles.`
      );
    } catch (error) {
      console.error("Erreur lors de la notification d'annulation:", error);
    }
  }

  async notifyMissionConfirmation(userId: string, missionTitle: string, missionId: string): Promise<void> {
    await this.createNotification(
      userId,
      "üéâ Participation confirm√©e",
      `F√©licitations ! Votre participation √† la mission "${missionTitle}" a √©t√© valid√©e par l'organisation. Rendez-vous le jour J !`,
      `/missions/${missionId}`
    );
  }

  async notifyMissionReminder(userId: string, missionTitle: string, missionId: string, startDate: string): Promise<void> {
    const formattedDate = new Date(startDate).toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    await this.createNotification(
      userId,
      "‚è∞ Rappel de mission",
      `N'oubliez pas votre mission "${missionTitle}" qui commence le ${formattedDate}. Pr√©parez-vous et soyez √† l'heure !`,
      `/missions/${missionId}`
    );
  }

  async notifyBadgeEarned(userId: string, badgeName: string): Promise<void> {
    await this.createNotification(
      userId,
      "üèÜ Nouveau badge obtenu",
      `Bravo ! Vous venez de d√©bloquer le badge "${badgeName}". Votre engagement fait la diff√©rence !`,
      `/profile`
    );
  }

  async notifySkillValidation(userId: string, skillName: string): Promise<void> {
    await this.createNotification(
      userId,
      "‚ú® Comp√©tence valid√©e",
      `Excellente nouvelle ! Votre comp√©tence "${skillName}" a √©t√© officiellement valid√©e par un superviseur.`,
      `/profile`
    );
  }

  async notifyMissionUpdate(userId: string, missionTitle: string, missionId: string, updateType: string): Promise<void> {
    const updateMessages = {
      'date': 'La date de la mission a √©t√© modifi√©e',
      'location': 'Le lieu de la mission a √©t√© mis √† jour',
      'description': 'La description de la mission a √©t√© enrichie',
      'requirements': 'Les pr√©requis de la mission ont √©t√© pr√©cis√©s',
      'general': 'Des informations importantes ont √©t√© mises √† jour'
    };

    const message = updateMessages[updateType as keyof typeof updateMessages] || updateMessages.general;

    await this.createNotification(
      userId,
      "üìù Mission mise √† jour",
      `La mission "${missionTitle}" a √©t√© modifi√©e : ${message}. Consultez les nouveaux d√©tails.`,
      `/missions/${missionId}`
    );
  }

  async notifyMissionCancelled(userId: string, missionTitle: string, reason?: string): Promise<void> {
    const reasonText = reason ? ` Motif : ${reason}` : '';
    await this.createNotification(
      userId,
      "üö´ Mission annul√©e",
      `La mission "${missionTitle}" a √©t√© annul√©e par l'organisation.${reasonText} Nous vous pr√©viendrons s'il y a des nouvelles opportunit√©s similaires.`
    );
  }

  async notifyMissionSpotAvailable(userId: string, missionTitle: string, missionId: string): Promise<void> {
    await this.createNotification(
      userId,
      "üéØ Place disponible",
      `Une place s'est lib√©r√©e pour la mission "${missionTitle}" qui vous int√©resse. Inscrivez-vous rapidement !`,
      `/missions/${missionId}`
    );
  }
  
  async markAsRead(notificationId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from("notifications")
        .update({ is_read: true })
        .eq("id", notificationId);

      return !error;
    } catch (error) {
      console.error("Erreur lors du marquage de notification:", error);
      return false;
    }
  }

  async markAllAsRead(userId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from("notifications")
        .update({ is_read: true })
        .eq("user_id", userId)
        .eq("is_read", false);

      return !error;
    } catch (error) {
      console.error("Erreur lors du marquage de toutes les notifications:", error);
      return false;
    }
  }

  async deleteNotification(notificationId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from("notifications")
        .delete()
        .eq("id", notificationId);

      return !error;
    } catch (error) {
      console.error("Erreur lors de la suppression de notification:", error);
      return false;
    }
  }

  async deleteAllNotifications(userId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from("notifications")
        .delete()
        .eq("user_id", userId);

      return !error;
    } catch (error) {
      console.error("Erreur lors de la suppression de toutes les notifications:", error);
      return false;
    }
  }

  async getUnreadCount(userId: string): Promise<number> {
    try {
      const { count, error } = await supabase
        .from("notifications")
        .select("*", { count: "exact", head: true })
        .eq("user_id", userId)
        .eq("is_read", false);

      return error ? 0 : count || 0;
    } catch (error) {
      console.error("Erreur lors du comptage des notifications:", error);
      return 0;
    }
  }

  async getUserNotifications(userId: string, limit: number = 20): Promise<NotificationWithDetails[]> {
    try {
      const { data, error } = await supabase
        .from("notifications")
        .select("*")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .limit(limit);

      if (error) throw error;

      return data as NotificationWithDetails[];
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des notifications:", error);
      return [];
    }
  }
}

export const notificationService = NotificationService.getInstance();
